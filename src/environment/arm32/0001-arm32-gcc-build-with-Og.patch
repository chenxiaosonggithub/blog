From 7da60ca6268df6c7d1ee3510d1f35d37ab1f7d8a Mon Sep 17 00:00:00 2001
From: ChenXiaoSong <chenxiaosongemail@foxmail.com>
Date: Sat, 14 May 2022 17:51:55 +0800
Subject: [PATCH] arm32: gcc build with -Og

Signed-off-by: ChenXiaoSong <chenxiaosongemail@foxmail.com>
---
 Makefile                            | 8 +-------
 arch/arm/include/asm/cmpxchg.h      | 3 ++-
 include/linux/build_bug.h           | 4 ++--
 include/linux/compiler_attributes.h | 2 +-
 include/linux/fortify-string.h      | 2 +-
 5 files changed, 7 insertions(+), 12 deletions(-)

diff --git a/Makefile b/Makefile
index edc3f44cd96c..280fecb4f3a7 100644
--- a/Makefile
+++ b/Makefile
@@ -753,13 +753,7 @@ KBUILD_CFLAGS	+= $(call cc-disable-warning, format-truncation)
 KBUILD_CFLAGS	+= $(call cc-disable-warning, format-overflow)
 KBUILD_CFLAGS	+= $(call cc-disable-warning, address-of-packed-member)
 
-ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
-KBUILD_CFLAGS += -O2
-else ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
-KBUILD_CFLAGS += -O3
-else ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE
-KBUILD_CFLAGS += -Os
-endif
+KBUILD_CFLAGS += -Og
 
 # Tell gcc to never replace conditional load with a non-conditional one
 ifdef CONFIG_CC_IS_GCC
diff --git a/arch/arm/include/asm/cmpxchg.h b/arch/arm/include/asm/cmpxchg.h
index 4dfe538dfc68..89b46a432b46 100644
--- a/arch/arm/include/asm/cmpxchg.h
+++ b/arch/arm/include/asm/cmpxchg.h
@@ -107,7 +107,8 @@ static inline unsigned long __xchg(unsigned long x, volatile void *ptr, int size
 #endif
 	default:
 		/* Cause a link-time error, the xchg() size is not supported */
-		__bad_xchg(ptr, size), ret = 0;
+		// __bad_xchg(ptr, size);
+		ret = 0;
 		break;
 	}
 
diff --git a/include/linux/build_bug.h b/include/linux/build_bug.h
index e3a0be2c90ad..09907aeca7b3 100644
--- a/include/linux/build_bug.h
+++ b/include/linux/build_bug.h
@@ -46,8 +46,8 @@
  * some other compile-time-evaluated condition, you should use BUILD_BUG_ON to
  * detect if someone changes it.
  */
-#define BUILD_BUG_ON(condition) \
-	BUILD_BUG_ON_MSG(condition, "BUILD_BUG_ON failed: " #condition)
+#define BUILD_BUG_ON(condition)
+	// BUILD_BUG_ON_MSG(condition, "BUILD_BUG_ON failed: " #condition)
 
 /**
  * BUILD_BUG - break compile if used.
diff --git a/include/linux/compiler_attributes.h b/include/linux/compiler_attributes.h
index 445e80517cab..2725f7fc8e09 100644
--- a/include/linux/compiler_attributes.h
+++ b/include/linux/compiler_attributes.h
@@ -143,7 +143,7 @@
  *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-error-function-attribute
  */
 #if __has_attribute(__error__)
-# define __compiletime_error(msg)       __attribute__((__error__(msg)))
+# define __compiletime_error(msg) //       __attribute__((__error__(msg)))
 #else
 # define __compiletime_error(msg)
 #endif
diff --git a/include/linux/fortify-string.h b/include/linux/fortify-string.h
index 3b401fa0f374..db43ffadd807 100644
--- a/include/linux/fortify-string.h
+++ b/include/linux/fortify-string.h
@@ -9,7 +9,7 @@
 
 void fortify_panic(const char *name) __noreturn __cold;
 void __read_overflow(void) __compiletime_error("detected read beyond size of object (1st parameter)");
-void __read_overflow2(void) __compiletime_error("detected read beyond size of object (2nd parameter)");
+#define  __read_overflow2() ; // __compiletime_error("detected read beyond size of object (2nd parameter)");
 void __read_overflow2_field(size_t avail, size_t wanted) __compiletime_warning("detected read beyond size of field (2nd parameter); maybe use struct_group()?");
 void __write_overflow(void) __compiletime_error("detected write beyond size of object (1st parameter)");
 void __write_overflow_field(size_t avail, size_t wanted) __compiletime_warning("detected write beyond size of field (1st parameter); maybe use struct_group()?");
-- 
2.34.1

